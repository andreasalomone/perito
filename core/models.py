import uuid
from datetime import datetime
from sqlalchemy import (
    create_engine,
    Column,
    String,
    DateTime,
    Float,
    Integer,
    Text,
    ForeignKey,
    Enum,
)
from sqlalchemy.orm import relationship, declarative_base
from core.database import db
import enum


class ReportStatus(enum.Enum):
    SUCCESS = "success"
    ERROR = "error"
    PROCESSING = "processing"


class ReportLog(db.Model):
    __tablename__ = "report_log"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    created_at = Column(DateTime, default=datetime.utcnow)
    status = Column(Enum(ReportStatus), nullable=False, default=ReportStatus.PROCESSING)
    generation_time_seconds = Column(Float, nullable=True)
    api_cost_usd = Column(Float, nullable=True)
    error_message = Column(Text, nullable=True)
    
    # The full, raw text generated by the LLM
    llm_raw_response = Column(Text, nullable=True)
    
    # The final text after user edits (if any)
    final_report_text = Column(Text, nullable=True)

    # Establish the one-to-many relationship
    documents = relationship("DocumentLog", back_populates="report")

    def __repr__(self):
        return f"<ReportLog(id={self.id}, status='{self.status}', created_at='{self.created_at}')>"


class DocumentLog(db.Model):
    __tablename__ = "document_log"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    report_id = Column(String(36), ForeignKey("report_log.id"), nullable=False)
    
    original_filename = Column(String(255), nullable=False)
    stored_filepath = Column(String(1024), nullable=False)  # Path to the file in a secure storage
    file_size_bytes = Column(Integer, nullable=False)
    
    # Establish the many-to-one relationship
    report = relationship("ReportLog", back_populates="documents")

    def __repr__(self):
        return f"<DocumentLog(id={self.id}, filename='{self.original_filename}', report_id='{self.report_id}')>" 